<schema package="mrg.grid">

<!--
/*
 * Copyright 2008 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
-->

   <class name="CondorConfigStore">
      <method name="GetGroup">
         <arg name="groupQuery" dir="I" type="map"
              desc="A query that defines the group desired.  Valid values for
                    the key are 'ID', 'Name', or 'Query'.  'ID' keys should
                    contain a specific GroupId as its value, 'Name' keys should
                    contain a Group Name as its value, and 'Query' keys should
                    contain a Query that the desired group uses to define
                    the members of the goup"/>
         <arg name="groupObj" dir="O" type="objId"/>
      </method>

      <method name="AddGroup">
         <arg name="groupName" dir="I" type="sstr"/>
         <arg name="groupDefinition" dir="I" type="map"
              desc="The definition of members for the group.  Valid values for
                    the map are 'NodeList' and 'Query'.  'NodeList' keys
                    should contain a map of nodes to include in the group
                    with the key being the priority, and the value the
                    node name (1:name).  'Query' keys should contain a
                    query string"/>
      </method>

      <method name="ModifyGroup">
         <arg name="groupId" dir="I" type="uint32"/>
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="groupName" dir="I" type="sstr"/>
         <arg name="groupDefinition" dir="I" type="map"
              desc="The definition of members for the group.  Valid values for
                    the map are 'NodeList' and 'Query'.  'NodeList' keys
                    should contain a map of nodes to include in the group
                    with the key being the priority, and the value the
                    node name (1:name).  'Query' keys should contain a
                    query string"/>
      </method>

<!--
      <method name="GetFeatureList">
         <arg name="featureList" dir="O" type="map"
              desc="Returns a map(featureId, featureName)"/>
      </method>
-->

      <method name="GetFeature">
         <arg name="featureQuery" dir="I" type="map"
              desc="A query that defines the feature desired.  Valid values for
                    the key are 'ID' or 'Name'.  'ID' keys should contain a
                    specific FeatureId as its value,  whereas 'Name' keys
                    should contain a Feature Name as its value"/>
         <arg name="featureObj" dir="O" type="objId"/>
      </method>

      <method name="AddFeature">
         <arg name="featureName" dir="I" type="sstr"/>
         <arg name="featureParams" dir="I" type="map"/>
         <arg name="includedFeatures" dir="I" type="map"
              desc="A map(featureId, priority) of other features included in
                    this feature"/>
         <arg name="featureConflicts" dir="I" type="map"
              desc="A map(featureId, priority) of other features this feature
                    conflicts with"/>
         <arg name="featureDepends" dir="I" type="map"
              desc="A map(featureId, priority) of other features this feature
                    depends on"/>
      </method>

      <method name="ModifyFeature">
         <arg name="featureId" dir="I" type="uint32"/>
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="featureName" dir="I" type="sstr"/>
         <arg name="featureParams" dir="I" type="map"/>
         <arg name="includedFeatures" dir="I" type="map"/>
         <arg name="featureConflicts" dir="I" type="map"/>
         <arg name="featureDepends" dir="I" type="map"/>
      </method>

      <method name="GetConfiguration">
         <arg name="configQuery" dir="I" type="map"
              desc="A query that defines the configuration desired.  Valid
                    values for the key are 'ID' or 'Name'.  'ID' keys should
                    contain a specific ConfigurationId as its value,  whereas
                    'Name' keys should contain a Configuration Name as its
                    value"/>
         <arg name="configObj" dir="O" type="objId"/>
      </method>

<!--
      <method name="AddConfiguration">
         <arg name="configName" dir="I" type="sstr"/>
         <arg name="configFeatures" dir="I" type="map"/>
         <arg name="customParams" dir="I" type="map"/>
         <arg name="defaultFeatures" dir="I" type="map"/>
      </method>

      <method name="ModifyConfiguration">
         <arg name="configId" dir="I" type="uint32"/>
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="configName" dir="I" type="sstr"/>
         <arg name="groupId" dir="I" type="uint32"/>
         <arg name="featureIds" dir="I" type="map"/>
         <arg name="params" dir="I" type="map"/>
         <arg name="defaultFeatures" dir="I" type="map"/>
      </method>
-->

      <method name="SaveConfiguration">
         <arg name="configName" dir="I" type="sstr"
              desc="A name for this configuration.  A blank name will result
                    in the store creating a name"/>
         <arg name="configId" dir="O" type="uint32"/>
         <arg name="failureReason" dir="O" type="map"
              desc="A map containing a list of attributes for groups that must
                    be set for the configuration to be valid, as well as the
                    Id for the last valid configuration"/>
      </method>

      <method name="ChangeConfiguration">
         <arg nane="configId" dir="I" type="uint32"/>
      </method>

      <method name="ActivateConfiguration">
         <arg name="failureReason" dir="O" type="map"
              desc="A map containing a list of attributes for groups that must
                    be set for the configuration to be valid, as well as the
                    Id for the last valid configuration"/>
<!--
         <arg name="configId" dir="I" type="uint32"/>
-->
      </method>

      <method name="GetNodeList">
         <arg name="nodeList" dir="O" type="map"/>
      </method>

      <method name="AddNode">
         <arg name="nodeName" dir="I" type="sstr"/>
         <arg name="nodePool" dir="I" type="sstr"/>
      </method>

      <method name="ModifyNode">
         <arg name="curNodeName" dir="I" type="sstr"/>
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="newNodeName" dir="I" type="sstr"/>
         <arg name="nodePool" dir="I" type="sstr"/>
      </method>

      <method name="GetParam">
         <arg name="paramName" dir="I" type="sstr"/>
         <arg name="paramObj" dir="O" type="objId"/>
      </method>

<!--
      <method name="AddParam">
         <arg name="paramName" dir="I" type="sstr"/>
         <arg name="paramType" dir="I" type="uint8"/>
         <arg name="paramValue" dir="I" type="lstr"/>
         <arg name="paramDefault" dir="I" type="lstr"/>
         <arg name="paramDesc" dir="I" type="lstr"/>
         <arg name="paramMustNotBeNull" dir="I" type="bool"/>
         <arg name="paramLevel" dir="I" type="uint8"/>
         <arg name="paramRequiresRestart" dir="I" type="bool"/>
         <arg name="paramDependsOn" dir="I" type="map"/>
         <arg name="paramConflictsWith" dir="I" type="map"/>
      </method>
-->

      <method name="ModifyParam">
         <arg name="paramName" dir="I" type="sstr"/>
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="paramType" dir="I" type="uint8"/>
         <arg name="paramValue" dir="I" type="lstr"/>
         <arg name="paramDefault" dir="I" type="lstr"/>
         <arg name="paramDesc" dir="I" type="lstr"/>
         <arg name="paramMustNotBeNull" dir="I" type="bool"/>
         <arg name="paramLevel" dir="I" type="uint8"/>
         <arg name="paramRequiresRestart" dir="I" type="bool"/>
         <arg name="paramDependsOn" dir="I" type="map"/>
         <arg name="paramConflictsWith" dir="I" type="map"/>
      </method>
   </class>

<!--
   <class name="CondorConfigNode">
      <property name="nodeName" type="sstr" index="y"/>
      <property name="pool" type="sstr"/>

      <method name="GetNodeName">
         <arg name="nodeName" dir="O" type="sstr"/>
      </method>

      <method name="SetNodeName">
         <arg name="nodeName" dir="I" type="sstr"/>
      </method>

      <method name="GetPool">
         <arg name="pool" dir="O" type="sstr"/>
      </method>

      <method name="SetPool">
         <arg name="pool" dir="I" type="sstr"/>
      </method>
   </class>
-->

   <class name="CondorConfig">
      <property name="configId" type="uint32" index="y"/>
      <property name="configName" type="sstr"/>
      <property name="configVersion" type="uint32"/>
      <property name="isActive" type="bool"/>
      <property name="featureList" type="map"
                desc="map(groupId, featureList)"/>
      <property name="customParams" type="map"
                desc="map(groupId, map(param, value))"/>
      <property name="defaultFeatures" type="map"
                desc="Features to be applied to nodes not explicitly defined"/>

      <method name="GetConfigId">
         <arg name="configId" dir="O" type="uint32"/>
      </method>

      <method name="GetConfigName">
         <arg name="configName" dir="O" type="sstr"/>
      </method>

<!--
      <method name="SetConfigName">
         <arg name="configName" dir="I" type="sstr"/>
      </method>
-->

      <method name="GetConfigVersion">
         <arg name="configVersion" dir="O" type="uint32"/>
      </method>

      <method name="IsConfigActive">
         <arg name="isActive" dir="O" type="bool"/>
      </method>

<!--
      <method name="SetConfigActive">
      </method>
-->

      <method name="GetFeatureList">
         <arg name="featureList" dir="O" type="map"/>
      </method>

<!--
      <method name="ModifyFeatureList">
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="featureList" dir="I" type="map"
              desc="map(groupId, featureList)"/>
      </method>
-->

      <method name="GetCustomParams">
         <arg name="customParams" dir="O" type="map"/>
      </method>

      <method name="ModifyCustomParams">
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="customParams" dir="I" type="map"
              desc="map(groupId, map(param, value))"/>
      </method>

      <method name="GetDefaultFeatures">
         <arg name="defaultFeatures" dir="O" type="map"/>
      </method>

      <method name="ModifyDefaultFeatures">
         <arg name="isDelete" dir="I" type="bool"/>
         <arg name="defaultFeatures" dir="I" type="map"/>
      </method>
   </class>

   <class name="CondorConfigFeature">
      <property name="featureId" type="uint32" index="y"/>
      <property name="featureName" type="sstr"/>
      <property name="paramList" type="map"/>
      <property name="featureList" type="map"/>
      <property name="conflictsWith" type="map"/>
      <property name="dependsOn" type="map"/>

      <method name="GetFeatureId">
         <arg name="featureId" dir="O" type="uint32"/>
      </method>

      <method name="GetFeatureName">
         <arg name="featureName" dir="O" type="sstr"/>
      </method>

      <method name="SetFeatureName">
         <arg name="featureName" dir="I" type="sstr"/>
      </method>

      <method name="GetFeatureList">
         <arg name="featureList" dir="O" type="map"/>
      </method>

      <method name="ModifyFeatureList">
         <arg name="featureList" dir="I" type="map"/>
         <arg name="isDelete" dir="I" type="bool"/>
      </method>

      <method name="GetParamList">
         <arg name="paramList" dir="O" type="map"/>
      </method>

      <method name="ModifyParamList">
         <arg name="paramList" dir="I" type="map"/>
         <arg name="isDelete" dir="I" type="bool"/>
      </method>

      <method name="GetConflicts">
         <arg name="conflictList" dir="O" type="map"/>
      </method>

      <method name="ModifyConflicts">
         <arg name="conflictList" dir="I" type="map"/>
         <arg name="isDelete" dir="I" type="bool"/>
      </method>

      <method name="GetDepends">
         <arg name="dependsList" dir="O" type="map"/>
      </method>

      <method name="ModifyDepends">
         <arg name="dependList" dir="I" type="map"/>
         <arg name="isDelete" dir="I" type="bool"/>
      </method>
   </class>

   <class name="CondorConfigGroup">
      <property name="groupId" type="uint32" index="y"/>
      <property name="groupName" type="sstr"/>

      <method name="GetIncludedNodes">
         <arg name="nodeList" dir="O" type="map"
              desc="The names of the nodes part of this group"/>
      </method>

      <method name="GetGroupId">
         <arg name="groupId" dir="O" type="uint32"/>
      </method>

      <method name="GetGroupName">
         <arg name="groupName" dir="O" type="sstr"/>
      </method>

      <method name="SetGroupName">
         <arg name="groupName" dir="I" type="sstr"/>
      </method>

      <method name="GetFeatures">
         <arg name="groupFeatures" dir="O" type="map"/>
      </method>

      <method name="AddFeatures">
         <arg name="groupFeatures" dir="I" type="map"
              desc="A map(featureId, priority) of features to add to the
                    group.  A priroty of 0 indicates indifference and 
                    the store should assign a priority"/>
         <arg name="paramsToSet" dir="O" type="map"
              desc="A map(paramName, reasonString) for parameters that need
                    to be set as a result of the features added before the
                    configuration will be considered valid"/>
      </method>

      <method name="RemoveFeatures">
         <arg name="groupFeatures" dir="I" type="map"
              desc="A map(featureId, priority) of features to remove from the
                    group"/>
      </method>

      <method name="GetParams">
         <arg name="customParams" dir="O" type="map"/>
      </method>

      <method name="AddParams">
         <arg name="customParams" dir="I" type="map"/>
      </method>

      <method name="RemoveParams">
         <arg name="customParams" dir="I" type="map"/>
      </method>

      <method name="GetConfig">
         <arg name="groupConfig" dir="O" type="map"/>
      </method>
   </class>

   <class name="CondorConfigParameter">
      <property name="name" type="sstr" index="y"/>
      <property name="paramType" type="uint8"/>
      <property name="value" type="lstr"/>
      <property name="default" type="lstr"/>
      <property name="desc" type="lstr"/>
      <property name="mustNotBeNull" type="bool"/>
      <property name="level" type="uint8"/>
      <property name="requiresRestart" type="bool"/>
      <property name="dependsOn" type="map"/>
      <property name="conflictsWith" type="map"/>

      <method name="GetName">
         <arg name="paramName" dir="O" type="sstr"/>
      </method>

      <method name="SetName">
         <arg name="paramName" dir="I" type="sstr"/>
      </method>

      <method name="GetParamType">
         <arg name="paramType" dir="O" type="uint8"/>
      </method>

      <method name="SetParamType">
         <arg name="paramType" dir="I" type="uint8"/>
      </method>

      <method name="GetValue">
         <arg name="paramValue" dir="O" type="lstr"/>
      </method>

      <method name="SetValue">
         <arg name="paramValue" dir="I" type="lstr"/>
      </method>

      <method name="GetDefault">
         <arg name="paramDefault" dir="O" type="lstr"/>
      </method>

      <method name="SetDefault">
         <arg name="paramDefault" dir="I" type="lstr"/>
      </method>

      <method name="GetDescription">
         <arg name="paramDesc" dir="O" type="lstr"/>
      </method>

      <method name="SetDescription">
         <arg name="paramDesc" dir="I" type="lstr"/>
      </method>

      <method name="GetDefaultMustChange">
         <arg name="paramMustChange" dir="O" type="bool"/>
      </method>

      <method name="SetDefaultMustChange">
         <arg name="paramMustChange" dir="I" type="bool"/>
      </method>

      <method name="GetVisibilityLevel">
         <arg name="paramLevel" dir="O" type="uint8"/>
      </method>

      <method name="SetVisibilityLevel">
         <arg name="paramLevel" dir="I" type="uint8"/>
      </method>

      <method name="GetRequiresRestart">
         <arg name="paramNeedsRestart" dir="O" type="bool"/>
      </method>

      <method name="SetRequiresRestart">
         <arg name="paramNeedsRestart" dir="I" type="bool"/>
      </method>

      <method name="GetDepends">
         <arg name="paramDepends" dir="O" type="map"/>
      </method>

      <method name="ModifyDepends">
         <arg name="paramDepends" dir="I" type="map"/>
         <arg name="isDelete" dir="I" type="bool"/>
      </method>

      <method name="GetConflicts">
         <arg name="paramConflicts" dir="O" type="map"/>
      </method>

      <method name="ModifyConflicts">
         <arg name="paramConflicts" dir="I" type="map"/>
         <arg name="isDelete" dir="I" type="bool"/>
      </method>
   </class>

   <eventArguments>
      <arg name="AffectedNodes" type="lstr"/>
      <arg name="RestartType" type="uint8"/>
   </eventArguments>

   <event name="CondorRestartEvent" sev="alert" args="AffectedNodes,RestartType"/>
</schema>