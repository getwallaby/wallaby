<schema package="mrg.grid.config">

<!--
/*
 * Copyright 2008 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
-->

<!--  conventions:  "set of X" means a map from X to True; "list of X" means a map from naturals to X -->

   <class name="Store">
      <property name="APIVersionNumber" type="uint32"
                desc="The version of the API the store supports"/>

      <method name="GetGroup">
         <arg name="query" dir="I" type="map"
              desc="A map(queryType, value) that defines the group desired.
                    The queryType can be either 'ID' or 'Name'.
                    'ID' queryTypes will search for a group with the ID
                    defined in value.  'Name' queryTypes will search for a
                    group with the name defined in value."/>
         <arg name="obj" dir="O" type="objId"/>
      </method>

      <method name="AddExplicitGroup">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"/>
      </method>

      <method name="RemoveGroup">
         <arg name="uid" dir="I" type="uint32"/>
      </method>

      <method name="GetFeature">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"/>
      </method>

      <method name="AddFeature">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"/>
      </method>

      <method name="RemoveFeature">
         <arg name="uid" dir="I" type="uint32"/>
      </method>

      <method name="MakeSnapshot">
         <arg name="name" dir="I" type="sstr"
              desc="A name for this configuration.  A blank name will result
                    in the store creating a name"/>
      </method>

      <method name="LoadSnapshot">
         <arg name="name" dir="I" type="sstr"/>
      </method>

      <method name="RemoveSnapshot">
         <arg name="name" dir="I" type="sstr"/>
      </method>

      <method name="ActivateConfiguration">
         <arg name="params" dir="O" type="map"
              desc="A map (node:parmList) containing a list of
                    nodes and the parameters that must be set for the
                    configuration to be valid"/>
      </method>

      <method name="AddNode">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"/>
      </method>

      <method name="GetNode">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"/>
      </method>

      <method name="RemoveNode">
         <arg name="name" dir="I" type="sstr"/>
      </method>

      <method name="GetParam">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"
              desc="A reference to the parameter object that matches the name
                    supplied"/>
      </method>

      <method name="AddParam">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"
              desc="A reference to the newly added parameter object"/>
      </method>

      <method name="RemoveParam">
         <arg name="name" dir="I" type="sstr"/>
      </method>

      <method name="GetSubsys">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"
              desc="A reference to the subsystem object that matches the name
                    supplied"/>
      </method>

      <method name="AddSubsys">
         <arg name="name" dir="I" type="sstr"/>
         <arg name="obj" dir="O" type="objId"
              desc="A reference to the newly added subsystem object"/>
      </method>

      <method name="RemoveSubsys">
         <arg name="name" dir="I" type="sstr"/>
      </method>
   </class>

   <class name="Node">
      <property name="name" type="sstr" index="y"/>

      <method name="GetPool">
         <arg name="pool" dir="O" type="sstr"/>
      </method>
  
      <method name="SetPool">
         <arg name="pool" dir="I" type="sstr"/>
      </method>

      <method name="GetLastCheckinTime">
         <arg name="time" dir="O" type="uint32"/>
      </method>

      <method name="GetConfig">
         <arg name="config" dir="O" type="map"
              desc="A map(parameter, value) representing the configuration for
                    the node supplied"/>
      </method>

      <method name="CheckConfigVersion">
         <arg name="version" dir="I" type="uint32"/>
      </method>

      <method name="GetIdentityGroup">
         <arg name="group" dir="O" type="objId"/>
      </method>

      <method name="GetMemberships">
         <arg name="groups" dir="O" type="map"
              desc="A list of groups, in inverse priority order (most important first)"/>
      </method>

      <method name="ModifyMemberships">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', and 'REPLACE'."/>
         <arg name="groups" dir="I" type="map"
              desc="A list of groups"/>
         <arg name="options" dir="I" type="map"/>
      </method>

   </class>

   <class name="Configuration">
      <property name="name" type="sstr" index="y"/>
   </class>

   <class name="Feature">
      <property name="uid" type="uint32" index="y"/>

      <method name="GetName">
         <arg name="name" dir="O" type="sstr"/>
      </method>

      <method name="SetName">
         <arg name="name" dir="I" type="sstr"/>
      </method>

      <method name="GetFeatures">
         <arg name="features" dir="O" type="map"
              desc="list of other features a feature includes"/>
      </method>

      <method name="ModifyFeatures">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', and 'REPLACE'."/>
         <arg name="features" dir="I" type="map"
              desc="A list of other features a feature includes, in priority order"/>
         <arg name="options" dir="I" type="map"/>
      </method>

      <method name="GetParams">
         <arg name="params" dir="O" type="map"
              desc="A map(paramName, value) of parameters and their
                    corresponding values that is specific to a group"/>
      </method>

      <method name="ModifyParams">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', and 'REPLACE'."/>
         <arg name="params" dir="I" type="map"
              desc="A map(paramName, value) of parameters and their
                    corresponding value as applied in this feature"/>
         <arg name="options" dir="I" type="map"/>
      </method>

      <method name="GetConflicts">
         <arg name="conflicts" dir="O" type="map"
              desc="A map(featureName, True) of other features a feature
                    conflicts with for proper operation"/>
      </method>

      <method name="ModifyConflicts">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', 'UNION', 'INTERSECT',
                   'DIFF', and 'REPLACE'."/>
         <arg name="conflicts" dir="I" type="map"
              desc="A set of other feature names that conflict with the feature"/>
         <arg name="options" dir="I" type="map"/>
      </method>

      <method name="GetDepends">
         <arg name="depends" dir="O" type="map"
              desc="A list of other features that this feature depends 
		    on for proper operation, in priority order." />
      </method>

      <method name="ModifyDepends">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', and 'REPLACE'."/>
         <arg name="depends" dir="I" type="map"
              desc="A list of other features a feature depends on, in priority order.  ADD adds deps to the end of this feature's deps, in the order supplied, REMOVE removes features from the dependency list, and REPLACE replaces the dependency list with the supplied list."/>
         <arg name="options" dir="I" type="map"/>
      </method>

      <method name="GetSubsys">
         <arg name="subsystems" dir="O" type="map"
              desc="A set of subsystem names that collaborate
                    with the feature.  This is used to determine subsystems
                    that may need to be restarted if a configuration is
                    changed"/>
      </method>

      <method name="ModifySubsys">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', 'UNION', 'INTERSECT',
                   'DIFF', and 'REPLACE'."/>
         <arg name="subsys" dir="I" type="map"
              desc="A set of subsystem names that collaborate
                    with the feature.  This is used to determine subsystems
                    that may need to be restarted if a configuration is
                    changed"/>
      </method>
   </class>

   <class name="Group">
      <property name="uid" type="uint32" index="y"/>

      <method name="GetMembership">
         <arg name="nodes" dir="O" type="map"
              desc="A set of the nodes associated with
                    this group"/>
      </method>

      <method name="GetName">
         <arg name="name" dir="O" type="sstr"/>
      </method>

      <method name="SetName">
         <arg name="name" dir="I" type="sstr"/>
      </method>

      <method name="GetFeatures">
         <arg name="features" dir="O" type="map"
              desc="A list of features to be applied to this group, in 
		    priority order (that is, the first one will be 
		    applied last, to take effect after ones with less 
		    priority)" />
      </method>

      <method name="ModifyFeatures">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', and 'REPLACE'."/>
         <arg name="features" dir="I" type="map"
              desc="A set of features to apply to 
                    dependency priority"/>
         <arg name="options" dir="I" type="map"/>
         <arg name="params" dir="O" type="map"
              desc="A map(paramName, reasonString) for parameters that need
                    to be set as a result of the features added before the
                    configuration will be considered valid"/>
      </method>

      <method name="GetParams">
         <arg name="params" dir="O" type="map"
              desc="A map(paramName, value) of parameters and their values that
                    are specific to the group"/>
      </method>

      <method name="ModifyParams">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', 'UNION', 'INTERSECT',
                   'DIFF', and 'REPLACE'."/>
         <arg name="params" dir="I" type="map"
              desc="A map(featureName, priority) of feature names and their
                    dependency priority"/>
         <arg name="options" dir="I" type="map"/>
      </method>

   </class>

   <class name="Parameter">
      <property name="name" type="sstr" index="y"/>

      <method name="GetType">
         <arg name="type" dir="O" type="sstr"/>
      </method>

      <method name="SetType">
         <arg name="type" dir="I" type="sstr"/>
      </method>

      <method name="GetDefault">
         <arg name="default" dir="O" type="lstr"/>
      </method>

      <method name="SetDefault">
         <arg name="default" dir="I" type="lstr"/>
      </method>

      <method name="GetDescription">
         <arg name="description" dir="O" type="lstr"/>
      </method>

      <method name="SetDescription">
         <arg name="description" dir="I" type="lstr"/>
      </method>

      <method name="GetDefaultMustChange">
         <arg name="mustChange" dir="O" type="bool"/>
      </method>

      <method name="SetDefaultMustChange">
         <arg name="mustChange" dir="I" type="bool"/>
      </method>

      <method name="GetVisibilityLevel">
         <arg name="level" dir="O" type="uint8"/>
      </method>

      <method name="SetVisibilityLevel">
         <arg name="level" dir="I" type="uint8"/>
      </method>

      <method name="GetRequiresRestart">
         <arg name="needsRestart" dir="O" type="bool"/>
      </method>

      <method name="SetRequiresRestart">
         <arg name="needsRestart" dir="I" type="bool"/>
      </method>

      <method name="GetDepends">
         <arg name="depends" dir="O" type="map"
              desc="A map(paramName, priority) of parameter names and their
                    dependency priority"/>
      </method>

      <method name="ModifyDepends">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', 'UNION', 'INTERSECT',
                   'DIFF', and 'REPLACE'."/>
         <arg name="depends" dir="I" type="map"
              desc="A set of parameter names that this parameter depends on"/>
         <arg name="options" dir="I" type="map"/>
      </method>

      <method name="GetConflicts">
         <arg name="conflicts" dir="O" type="map"
              desc="A set of parameter names that conflict with the parameter"/>
      </method>

      <method name="ModifyConflicts">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', 'UNION', 'INTERSECT',
                   'DIFF', and 'REPLACE'."/>
         <arg name="conflicts" dir="I" type="map"
              desc="A set of parameter names that this parameter conflicts with"/>
         <arg name="options" dir="I" type="map"/>
      </method>
   </class>

   <class name="Subsystem">
      <property name="name" type="sstr" index="y"/>

      <method name="GetParams">
         <arg name="params" dir="O" type="map"
              desc="A set of parameter names that the subsystem is interested in"/>
      </method>

      <method name="ModifyParams">
         <arg name="command" dir="I" type="sstr"
              desc="Valid commands are 'ADD', 'REMOVE', 'UNION', 'INTERSECT',
                   'DIFF', and 'REPLACE'."/>
         <arg name="params" dir="I" type="map"
              desc="A set of parameter names"/>
      </method>
   </class>

   <eventArguments>
      <arg name="AffectedNodes" type="lstr"/>
      <arg name="Restart" type="bool"/>
      <arg name="Targets" type="map"
           desc="A map(Application, Subsystem) of the applications or their
                 subsystems that need to have the specified action performed"/>
   </eventArguments>

   <event name="RestartEvent" sev="alert" args="AffectedNodes,Restart,Targets"/>
</schema>
